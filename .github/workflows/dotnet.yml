# This workflow builds a BepInEx plugin and creates releases
name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - uses: battila7/get-version-action@v2
      id: get_version

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ./TTFLoaderPlugin.sln

    - name: Build
      run: dotnet build ./TTFLoaderPlugin.sln --no-restore -c Release

    - name: Find DLL path
      id: find_dll
      run: |
        # 查找编译生成的DLL文件
        DLL_PATH=$(find . -name "TTFLoader.dll" -path "*/Release/*" | head -n 1)
        if [ -z "$DLL_PATH" ]; then
          echo "DLL not found, listing build directory:"
          find . -name "*.dll" -o -name "bin" -o -name "obj" | head -20
          exit 1
        fi
        echo "dll_path=$DLL_PATH" >> $GITHUB_OUTPUT
        echo "Found DLL at: $DLL_PATH"

    - name: Create artifact directory
      run: |
        mkdir -p artifacts
        mkdir -p publish

    - name: Copy plugin files
      run: |
        # Copy the built DLL using the found path
        cp ${{ steps.find_dll.outputs.dll_path }} artifacts/
        
        # Copy README and LICENSE if they exist
        if [ -f README.md ]; then cp README.md artifacts/; fi
        if [ -f LICENSE ]; then cp LICENSE artifacts/; fi

    - name: Create zip package
      run: |
        cd artifacts
        zip -r ../publish/TTFLoader-${{ steps.get_version.outputs.version }}.zip .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TTFLoader-${{ steps.get_version.outputs.version }}
        path: artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: publish/TTFLoader-${{ steps.get_version.outputs.version }}.zip
        name: TTFLoader ${{ steps.get_version.outputs.version }}
        body: |
          ## TTFLoader ${{ steps.get_version.outputs.version }}
          
          A BepInEx plugin for loading TTF fonts in Unity IL2CPP games.
          
          ### Changes
          - [Add your changes here]
          
          ### Installation
          1. Extract the zip file
          2. Copy `TTFLoader.dll` to your game's `BepInEx/plugins/` folder
          3. Place your `.ttf` font files in the game root directory
          
          ### Requirements
          - BepInEx 6.x (IL2CPP)
          - Unity 2023.x
          - TextMesh Pro
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
